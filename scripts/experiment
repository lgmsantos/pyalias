#! /usr/bin/env zsh

script_dir=$( dirname $( readlink -f $0 ) )
source $script_dir/env
datadir=$script_dir/../data

mkdir -p $datadir

SIZE_START=10 # 2^10 (approx 1,000) to

# how large distribution can this machine handle?
# I'll guess based on /proc/meminfo
freemem=$( cat /proc/meminfo | grep -i memfree | sed 's/[^0-9]//g' )
if [[ $? -eq 0 ]]; then
    freemem=$(( 1024 * freemem )) #free mem in bytes
    SIZE_STOP=$( echo $freemem | python3 -c "
from math import log
mem=int(input())
print( int(log( mem / 100, 2 )) )
")

else
    echo 'could not find memory info' 
    SIZE_STOP=20
fi

echo SIZE_STOP set to $SIZE_STOP

DISTRIBUTION_SIZES=()
for i in $( seq $SIZE_START $SIZE_STOP ); do
    DISTRIBUTION_SIZES=( $DISTRIBUTION_SIZES $(( 1 << i )) )
done

DISTRIBUTION_KIND=( 'random' 'linear' 'quad' 'exp' )

for kind in $DISTRIBUTION_KIND; do

    kinddir=$datadir/$kind
    mkdir -p $kinddir

    files=()

    for ds in $DISTRIBUTION_SIZES; do 
        file_name=$( printf '%s/p%010d' $kinddir $ds )
        files=( $files $file_name )
        if [[ ! -e $file_name ]]; then
            echo generating file $file_name
            python3 -m pdist $kind $ds $file_name
        fi
    done

    sample_size=$(( (1 << 30) - 1 ))
    for i in $( seq 1 ${#files} ); do

        p_path=${files[i]}
        n=${DISTRIBUTION_SIZES[i]}
        result_file=$(dirname $p_path)/result-$(basename $p_path).csv
        tempfile=.temp

        echo running methods for file $( basename $p_path )
        echo $result_file
        if [[ ! -e $result_file ]]; then
            python3 -m choice header > $tempfile

            for method in {binsearch-old,binsearch-fixed,alias,alias-fast}; do
                echo '   ' $method
                time python3 -m choice \
                    $method $p_path $sample_size >> $tempfile
            done

            echo done
            echo

            mv $tempfile $result_file
        fi
    done

done 
